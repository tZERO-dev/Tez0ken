@startuml
' ##################### Styles #####################
skinparam shadowing false
skinparam package {
  borderColor #00CE7D
  fontColor #00CE7D
}
skinparam interface {
  arrowColor #00CE7D
  backgroundColor #C7F9E6
  borderColor #00CE7D
  fontSize 15
}
skinparam CircledCharacter {
  fontColor #00CE7D
}
skinparam class {
  arrowColor #00CE7D
  headerBackgroundColor #C7F9E6
  backgroundColor white
  borderColor #00CE7D
  fontSize 15
  fontColor #00CE7D
  attributeFontColor #00CE7D
}
skinparam component {
  backgroundColor white
  borderColor white
  arrowColor #00CE7D
  fontColor #00CE7D
  fontSize 14
}
hide empty methods
' ##################################################

interface validate_param << (R,white) >> {
    source : address
    destination : address
    value : nat
}

interface validate_response << (R,white) >> {
    transfer : validate_param
    source : account
    destination : account
}

interface validate_request << (R,white) >> {
    request : validate_param
    callback : validate_response contract
}

package Registry <<Rectangle>> {
	interface new_param << (R,white) >> {
		address : address
		role : nat
		frozen : bool
		domicile : string
		accreditation : nat option
	}

	interface freeze_param << (R,white) >> {
		address : address
		frozen : bool
	}

	interface accreditation_param << (R,white) >> {
		address : address
		accreditation : nat option
	}

	interface domicile_param << (R,white) >> {
		address : address
		domicile : string
	}

	interface account << (R,white) >> {
		parent_id : string
		role : nat
		frozen : bool
		domicile : string option
		accreditation : int option
	}

	class Registry << (C,white) >> {
		+ accounts : (string, account) big_map

        + Accounts (validate_request)
        + Append (new_param)
        + Exists (address)
        + Remove (address)
        + SetAccreditation (accreditation_param)
        + SetDomicile (domicile_param)
        + SetFrozen (freeze_param)

	}
}

@enduml
